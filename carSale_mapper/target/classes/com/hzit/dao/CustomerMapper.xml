<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hzit.dao.CustomerMapper">
    <!-- Customer的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Customer_Map" type="com.hzit.entity.Customer">
        <id column="customerId" jdbcType="INTEGER" property="customerId" />
        <result column="store_id" jdbcType="INTEGER" property="storeId" />
        <result column="customerSex" jdbcType="VARCHAR" property="customerSex" />
        <result column="address_id" jdbcType="INTEGER" property="addressId" />
        <result column="last_name" jdbcType="VARCHAR" property="lastName" />
        <result column="active" jdbcType="BIT" property="active" />
        <result column="customerName" jdbcType="VARCHAR" property="customerName" />
        <result column="companyId" jdbcType="INTEGER" property="companyId" />
        <result column="customerPhone" jdbcType="VARCHAR" property="customerPhone" />
        <result column="customerType" jdbcType="VARCHAR" property="customerType" />
        <result column="customerCreateTime" jdbcType="TIMESTAMP" property="customerCreateTime" />
        <result column="last_update" jdbcType="TIMESTAMP" property="lastUpdate" />
        <result column="customerBirthday" jdbcType="DATE" property="customerBirthday" />
        <result column="customer_id" jdbcType="INTEGER" property="customerId" />
        <result column="create_date" jdbcType="DATE" property="createDate" />
        <result column="first_name" jdbcType="VARCHAR" property="firstName" />
        <result column="email" jdbcType="VARCHAR" property="email" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:customer的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="customer_Column">
        customer.customerId as customerId
        ,customer.store_id as store_id
        ,customer.customerSex as customerSex
        ,customer.address_id as address_id
        ,customer.last_name as last_name
        ,customer.active as active
        ,customer.customerName as customerName
        ,customer.companyId as companyId
        ,customer.customerPhone as customerPhone
        ,customer.customerType as customerType
        ,customer.customerCreateTime as customerCreateTime
        ,customer.last_update as last_update
        ,customer.customerBirthday as customerBirthday
        ,customer.customer_id as customer_id
        ,customer.create_date as create_date
        ,customer.first_name as first_name
        ,customer.email as email
    </sql>

    <!--获得类名为:Customer对应的数据库表的数据总行数 -->
    <select id="getCustomerRowCount" parameterType="com.hzit.common.Assist" resultType="java.lang.Long">
        select count(customerId) from customer
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Customer对应数据库中表的数据集合 -->
    <select id="selectCustomer" parameterType="com.hzit.common.Assist"  resultMap="result_Customer_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="customer_Column" /> 
            </otherwise>
        </choose>
        from customer
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT customerId as primary_key FROM customer
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow,jdbcType=INTEGER},#{rowSize,jdbcType=INTEGER} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize,jdbcType=INTEGER}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=customer.customerId
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Customer对象,以参数Customer对象中不为空的属性作为条件进行查询-->
    <select id="selectCustomerByObj" parameterType="com.hzit.entity.Customer" resultMap="result_Customer_Map">
        select 
            <include refid="customer_Column" /> 
        from customer
        <where>
            <if test="email != null "> and customer.email = #{email,jdbcType=VARCHAR}</if>
            <if test="firstName != null "> and customer.first_name = #{firstName,jdbcType=VARCHAR}</if>
            <if test="createDate != null "> and customer.create_date = #{createDate,jdbcType=DATE}</if>
            <if test="customerId != null "> and customer.customer_id = #{customerId,jdbcType=INTEGER}</if>
            <if test="customerBirthday != null "> and customer.customerBirthday = #{customerBirthday,jdbcType=DATE}</if>
            <if test="lastUpdate != null "> and customer.last_update = #{lastUpdate,jdbcType=TIMESTAMP}</if>
            <if test="customerCreateTime != null "> and customer.customerCreateTime = #{customerCreateTime,jdbcType=TIMESTAMP}</if>
            <if test="customerType != null "> and customer.customerType = #{customerType,jdbcType=VARCHAR}</if>
            <if test="customerPhone != null "> and customer.customerPhone = #{customerPhone,jdbcType=VARCHAR}</if>
            <if test="companyId != null "> and customer.companyId = #{companyId,jdbcType=INTEGER}</if>
            <if test="customerName != null "> and customer.customerName = #{customerName,jdbcType=VARCHAR}</if>
            <if test="active != null "> and customer.active = #{active,jdbcType=BIT}</if>
            <if test="lastName != null "> and customer.last_name = #{lastName,jdbcType=VARCHAR}</if>
            <if test="addressId != null "> and customer.address_id = #{addressId,jdbcType=INTEGER}</if>
            <if test="customerSex != null "> and customer.customerSex = #{customerSex,jdbcType=VARCHAR}</if>
            <if test="storeId != null "> and customer.store_id = #{storeId,jdbcType=INTEGER}</if>
            <if test="customerId != null "> and customer.customerId = #{customerId,jdbcType=INTEGER}</if>
        </where>
    </select> 

    <!-- 通过Customer的id获得对应数据库中表的数据对象-->
    <select id="selectCustomerById" parameterType="java.lang.Integer" resultMap="result_Customer_Map">
        select 
            <include refid="customer_Column" /> 
        from customer
        where customer.customerId = #{id,jdbcType=INTEGER}
    </select> 

    <!-- 将Customer插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertCustomer" parameterType="com.hzit.entity.Customer">
        insert into customer(customerId,store_id,customerSex,address_id,last_name,active,customerName,companyId,customerPhone,customerType,customerCreateTime,last_update,customerBirthday,customer_id,create_date,first_name,email) 
        values(#{customerId,jdbcType=INTEGER},#{storeId,jdbcType=INTEGER},#{customerSex,jdbcType=VARCHAR},#{addressId,jdbcType=INTEGER},#{lastName,jdbcType=VARCHAR},#{active,jdbcType=BIT},#{customerName,jdbcType=VARCHAR},#{companyId,jdbcType=INTEGER},#{customerPhone,jdbcType=VARCHAR},#{customerType,jdbcType=VARCHAR},#{customerCreateTime,jdbcType=TIMESTAMP},#{lastUpdate,jdbcType=TIMESTAMP},#{customerBirthday,jdbcType=DATE},#{customerId,jdbcType=INTEGER},#{createDate,jdbcType=DATE},#{firstName,jdbcType=VARCHAR},#{email,jdbcType=VARCHAR})
    </insert>

    <!-- 将Customer中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyCustomer" parameterType="com.hzit.entity.Customer">
        insert into customer
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="customerId != null">customerId,</if>
            <if test="storeId != null">store_id,</if>
            <if test="customerSex != null">customerSex,</if>
            <if test="addressId != null">address_id,</if>
            <if test="lastName != null">last_name,</if>
            <if test="active != null">active,</if>
            <if test="customerName != null">customerName,</if>
            <if test="companyId != null">companyId,</if>
            <if test="customerPhone != null">customerPhone,</if>
            <if test="customerType != null">customerType,</if>
            <if test="customerCreateTime != null">customerCreateTime,</if>
            <if test="lastUpdate != null">last_update,</if>
            <if test="customerBirthday != null">customerBirthday,</if>
            <if test="customerId != null">customer_id,</if>
            <if test="createDate != null">create_date,</if>
            <if test="firstName != null">first_name,</if>
            <if test="email != null">email,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="customerId != null"> #{customerId,jdbcType=INTEGER},</if>
            <if test="storeId != null"> #{storeId,jdbcType=INTEGER},</if>
            <if test="customerSex != null"> #{customerSex,jdbcType=VARCHAR},</if>
            <if test="addressId != null"> #{addressId,jdbcType=INTEGER},</if>
            <if test="lastName != null"> #{lastName,jdbcType=VARCHAR},</if>
            <if test="active != null"> #{active,jdbcType=BIT},</if>
            <if test="customerName != null"> #{customerName,jdbcType=VARCHAR},</if>
            <if test="companyId != null"> #{companyId,jdbcType=INTEGER},</if>
            <if test="customerPhone != null"> #{customerPhone,jdbcType=VARCHAR},</if>
            <if test="customerType != null"> #{customerType,jdbcType=VARCHAR},</if>
            <if test="customerCreateTime != null"> #{customerCreateTime,jdbcType=TIMESTAMP},</if>
            <if test="lastUpdate != null"> #{lastUpdate,jdbcType=TIMESTAMP},</if>
            <if test="customerBirthday != null"> #{customerBirthday,jdbcType=DATE},</if>
            <if test="customerId != null"> #{customerId,jdbcType=INTEGER},</if>
            <if test="createDate != null"> #{createDate,jdbcType=DATE},</if>
            <if test="firstName != null"> #{firstName,jdbcType=VARCHAR},</if>
            <if test="email != null"> #{email,jdbcType=VARCHAR},</if>
        </trim>
    </insert>

    <!-- 将Customer批量插入到对应数据库的表中-->
    <insert id="insertCustomerByBatch" parameterType="ArrayList">
        insert into customer(customerId,store_id,customerSex,address_id,last_name,active,customerName,companyId,customerPhone,customerType,customerCreateTime,last_update,customerBirthday,customer_id,create_date,first_name,email) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.customerId,jdbcType=INTEGER},#{item.storeId,jdbcType=INTEGER},#{item.customerSex,jdbcType=VARCHAR},#{item.addressId,jdbcType=INTEGER},#{item.lastName,jdbcType=VARCHAR},#{item.active,jdbcType=BIT},#{item.customerName,jdbcType=VARCHAR},#{item.companyId,jdbcType=INTEGER},#{item.customerPhone,jdbcType=VARCHAR},#{item.customerType,jdbcType=VARCHAR},#{item.customerCreateTime,jdbcType=TIMESTAMP},#{item.lastUpdate,jdbcType=TIMESTAMP},#{item.customerBirthday,jdbcType=DATE},#{item.customerId,jdbcType=INTEGER},#{item.createDate,jdbcType=DATE},#{item.firstName,jdbcType=VARCHAR},#{item.email,jdbcType=VARCHAR})
        </foreach>
    </insert>

    <!-- 通过Customer的id将数据库表中对应的数据删除-->
    <delete id="deleteCustomerById" parameterType="java.lang.Integer">
        delete from customer
        where customerId = #{id,jdbcType=INTEGER}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Customer对应的数据库表的数据删除-->
    <delete id="deleteCustomer" parameterType="com.hzit.common.Assist">
        delete from customer
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Customer的id将Customer的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateCustomerById" parameterType="com.hzit.entity.Customer">
        update customer set
            store_id=#{storeId,jdbcType=INTEGER}
            ,customerSex=#{customerSex,jdbcType=VARCHAR}
            ,address_id=#{addressId,jdbcType=INTEGER}
            ,last_name=#{lastName,jdbcType=VARCHAR}
            ,active=#{active,jdbcType=BIT}
            ,customerName=#{customerName,jdbcType=VARCHAR}
            ,companyId=#{companyId,jdbcType=INTEGER}
            ,customerPhone=#{customerPhone,jdbcType=VARCHAR}
            ,customerType=#{customerType,jdbcType=VARCHAR}
            ,customerCreateTime=#{customerCreateTime,jdbcType=TIMESTAMP}
            ,last_update=#{lastUpdate,jdbcType=TIMESTAMP}
            ,customerBirthday=#{customerBirthday,jdbcType=DATE}
            ,customer_id=#{customerId,jdbcType=INTEGER}
            ,create_date=#{createDate,jdbcType=DATE}
            ,first_name=#{firstName,jdbcType=VARCHAR}
            ,email=#{email,jdbcType=VARCHAR}
        where customerId=#{customerId,jdbcType=INTEGER}
    </update>

    <!-- 通过Customer的id将Customer中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyCustomerById" parameterType="com.hzit.entity.Customer">
        update customer
        <set>
            <if test="storeId != null">
                store_id=#{storeId,jdbcType=INTEGER},
            </if>
            <if test="customerSex != null">
                customerSex=#{customerSex,jdbcType=VARCHAR},
            </if>
            <if test="addressId != null">
                address_id=#{addressId,jdbcType=INTEGER},
            </if>
            <if test="lastName != null">
                last_name=#{lastName,jdbcType=VARCHAR},
            </if>
            <if test="active != null">
                active=#{active,jdbcType=BIT},
            </if>
            <if test="customerName != null">
                customerName=#{customerName,jdbcType=VARCHAR},
            </if>
            <if test="companyId != null">
                companyId=#{companyId,jdbcType=INTEGER},
            </if>
            <if test="customerPhone != null">
                customerPhone=#{customerPhone,jdbcType=VARCHAR},
            </if>
            <if test="customerType != null">
                customerType=#{customerType,jdbcType=VARCHAR},
            </if>
            <if test="customerCreateTime != null">
                customerCreateTime=#{customerCreateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="lastUpdate != null">
                last_update=#{lastUpdate,jdbcType=TIMESTAMP},
            </if>
            <if test="customerBirthday != null">
                customerBirthday=#{customerBirthday,jdbcType=DATE},
            </if>
            <if test="customerId != null">
                customer_id=#{customerId,jdbcType=INTEGER},
            </if>
            <if test="createDate != null">
                create_date=#{createDate,jdbcType=DATE},
            </if>
            <if test="firstName != null">
                first_name=#{firstName,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email=#{email,jdbcType=VARCHAR},
            </if>
        </set>
        where customerId=#{customerId,jdbcType=INTEGER}
    </update>

    <!-- 通过辅助工具Assist中的条件将Customer中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateCustomer" parameterType="map">
        update customer
        <set>
                customerId=#{enti.customerId,jdbcType=INTEGER},
                store_id=#{enti.storeId,jdbcType=INTEGER},
                customerSex=#{enti.customerSex,jdbcType=VARCHAR},
                address_id=#{enti.addressId,jdbcType=INTEGER},
                last_name=#{enti.lastName,jdbcType=VARCHAR},
                active=#{enti.active,jdbcType=BIT},
                customerName=#{enti.customerName,jdbcType=VARCHAR},
                companyId=#{enti.companyId,jdbcType=INTEGER},
                customerPhone=#{enti.customerPhone,jdbcType=VARCHAR},
                customerType=#{enti.customerType,jdbcType=VARCHAR},
                customerCreateTime=#{enti.customerCreateTime,jdbcType=TIMESTAMP},
                last_update=#{enti.lastUpdate,jdbcType=TIMESTAMP},
                customerBirthday=#{enti.customerBirthday,jdbcType=DATE},
                customer_id=#{enti.customerId,jdbcType=INTEGER},
                create_date=#{enti.createDate,jdbcType=DATE},
                first_name=#{enti.firstName,jdbcType=VARCHAR},
                email=#{enti.email,jdbcType=VARCHAR},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Customer中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyCustomer" parameterType="map">
        update customer
        <set>
            <if test="enti.customerId != null">
                customerId=#{enti.customerId,jdbcType=INTEGER},
            </if>
            <if test="enti.storeId != null">
                store_id=#{enti.storeId,jdbcType=INTEGER},
            </if>
            <if test="enti.customerSex != null">
                customerSex=#{enti.customerSex,jdbcType=VARCHAR},
            </if>
            <if test="enti.addressId != null">
                address_id=#{enti.addressId,jdbcType=INTEGER},
            </if>
            <if test="enti.lastName != null">
                last_name=#{enti.lastName,jdbcType=VARCHAR},
            </if>
            <if test="enti.active != null">
                active=#{enti.active,jdbcType=BIT},
            </if>
            <if test="enti.customerName != null">
                customerName=#{enti.customerName,jdbcType=VARCHAR},
            </if>
            <if test="enti.companyId != null">
                companyId=#{enti.companyId,jdbcType=INTEGER},
            </if>
            <if test="enti.customerPhone != null">
                customerPhone=#{enti.customerPhone,jdbcType=VARCHAR},
            </if>
            <if test="enti.customerType != null">
                customerType=#{enti.customerType,jdbcType=VARCHAR},
            </if>
            <if test="enti.customerCreateTime != null">
                customerCreateTime=#{enti.customerCreateTime,jdbcType=TIMESTAMP},
            </if>
            <if test="enti.lastUpdate != null">
                last_update=#{enti.lastUpdate,jdbcType=TIMESTAMP},
            </if>
            <if test="enti.customerBirthday != null">
                customerBirthday=#{enti.customerBirthday,jdbcType=DATE},
            </if>
            <if test="enti.customerId != null">
                customer_id=#{enti.customerId,jdbcType=INTEGER},
            </if>
            <if test="enti.createDate != null">
                create_date=#{enti.createDate,jdbcType=DATE},
            </if>
            <if test="enti.firstName != null">
                first_name=#{enti.firstName,jdbcType=VARCHAR},
            </if>
            <if test="enti.email != null">
                email=#{enti.email,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>