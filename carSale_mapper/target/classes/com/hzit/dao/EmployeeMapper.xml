<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hzit.dao.EmployeeMapper">
    <!-- Employee的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Employee_Map" type="com.hzit.entity.Employee">
        <id column="empId" jdbcType="INTEGER" property="empId" />
        <result column="companyId" jdbcType="INTEGER" property="companyId" />
        <result column="empPhone" jdbcType="VARCHAR" property="empPhone" />
        <result column="empSalery" jdbcType="DECIMAL" property="empSalery" />
        <result column="positionId" jdbcType="INTEGER" property="positionId" />
        <result column="empName" jdbcType="VARCHAR" property="empName" />
        <result column="empPassword" jdbcType="VARCHAR" property="empPassword" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:employee的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="employee_Column">
        employee.empId as empId
        ,employee.companyId as companyId
        ,employee.empPhone as empPhone
        ,employee.empSalery as empSalery
        ,employee.positionId as positionId
        ,employee.empName as empName
        ,employee.empPassword as empPassword
    </sql>

    <!--获得类名为:Employee对应的数据库表的数据总行数 -->
    <select id="getEmployeeRowCount" parameterType="com.hzit.common.Assist" resultType="java.lang.Long">
        select count(empId) from employee
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Employee对应数据库中表的数据集合 -->
    <select id="selectEmployee" parameterType="com.hzit.common.Assist"  resultMap="result_Employee_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="employee_Column" /> 
            </otherwise>
        </choose>
        from employee
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT empId as primary_key FROM employee
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow,jdbcType=INTEGER},#{rowSize,jdbcType=INTEGER} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize,jdbcType=INTEGER}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=employee.empId
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Employee对象,以参数Employee对象中不为空的属性作为条件进行查询-->
    <select id="selectEmployeeByObj" parameterType="com.hzit.entity.Employee" resultMap="result_Employee_Map">
        select 
            <include refid="employee_Column" /> 
        from employee
        <where>
            <if test="empPassword != null "> and employee.empPassword = #{empPassword,jdbcType=VARCHAR}</if>
            <if test="empName != null "> and employee.empName = #{empName,jdbcType=VARCHAR}</if>
            <if test="positionId != null "> and employee.positionId = #{positionId,jdbcType=INTEGER}</if>
            <if test="empSalery != null "> and employee.empSalery = #{empSalery,jdbcType=DECIMAL}</if>
            <if test="empPhone != null "> and employee.empPhone = #{empPhone,jdbcType=VARCHAR}</if>
            <if test="companyId != null "> and employee.companyId = #{companyId,jdbcType=INTEGER}</if>
            <if test="empId != null "> and employee.empId = #{empId,jdbcType=INTEGER}</if>
        </where>
    </select> 

    <!-- 通过Employee的id获得对应数据库中表的数据对象-->
    <select id="selectEmployeeById" parameterType="java.lang.Integer" resultMap="result_Employee_Map">
        select 
            <include refid="employee_Column" /> 
        from employee
        where employee.empId = #{id,jdbcType=INTEGER}
    </select> 

    <!-- 将Employee插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertEmployee" parameterType="com.hzit.entity.Employee">
        insert into employee(empId,companyId,empPhone,empSalery,positionId,empName,empPassword) 
        values(#{empId,jdbcType=INTEGER},#{companyId,jdbcType=INTEGER},#{empPhone,jdbcType=VARCHAR},#{empSalery,jdbcType=DECIMAL},#{positionId,jdbcType=INTEGER},#{empName,jdbcType=VARCHAR},#{empPassword,jdbcType=VARCHAR})
    </insert>

    <!-- 将Employee中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyEmployee" parameterType="com.hzit.entity.Employee">
        insert into employee
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="empId != null">empId,</if>
            <if test="companyId != null">companyId,</if>
            <if test="empPhone != null">empPhone,</if>
            <if test="empSalery != null">empSalery,</if>
            <if test="positionId != null">positionId,</if>
            <if test="empName != null">empName,</if>
            <if test="empPassword != null">empPassword,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="empId != null"> #{empId,jdbcType=INTEGER},</if>
            <if test="companyId != null"> #{companyId,jdbcType=INTEGER},</if>
            <if test="empPhone != null"> #{empPhone,jdbcType=VARCHAR},</if>
            <if test="empSalery != null"> #{empSalery,jdbcType=DECIMAL},</if>
            <if test="positionId != null"> #{positionId,jdbcType=INTEGER},</if>
            <if test="empName != null"> #{empName,jdbcType=VARCHAR},</if>
            <if test="empPassword != null"> #{empPassword,jdbcType=VARCHAR},</if>
        </trim>
    </insert>

    <!-- 将Employee批量插入到对应数据库的表中-->
    <insert id="insertEmployeeByBatch" parameterType="ArrayList">
        insert into employee(empId,companyId,empPhone,empSalery,positionId,empName,empPassword) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.empId,jdbcType=INTEGER},#{item.companyId,jdbcType=INTEGER},#{item.empPhone,jdbcType=VARCHAR},#{item.empSalery,jdbcType=DECIMAL},#{item.positionId,jdbcType=INTEGER},#{item.empName,jdbcType=VARCHAR},#{item.empPassword,jdbcType=VARCHAR})
        </foreach>
    </insert>

    <!-- 通过Employee的id将数据库表中对应的数据删除-->
    <delete id="deleteEmployeeById" parameterType="java.lang.Integer">
        delete from employee
        where empId = #{id,jdbcType=INTEGER}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Employee对应的数据库表的数据删除-->
    <delete id="deleteEmployee" parameterType="com.hzit.common.Assist">
        delete from employee
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Employee的id将Employee的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateEmployeeById" parameterType="com.hzit.entity.Employee">
        update employee set
            companyId=#{companyId,jdbcType=INTEGER}
            ,empPhone=#{empPhone,jdbcType=VARCHAR}
            ,empSalery=#{empSalery,jdbcType=DECIMAL}
            ,positionId=#{positionId,jdbcType=INTEGER}
            ,empName=#{empName,jdbcType=VARCHAR}
            ,empPassword=#{empPassword,jdbcType=VARCHAR}
        where empId=#{empId,jdbcType=INTEGER}
    </update>

    <!-- 通过Employee的id将Employee中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyEmployeeById" parameterType="com.hzit.entity.Employee">
        update employee
        <set>
            <if test="companyId != null">
                companyId=#{companyId,jdbcType=INTEGER},
            </if>
            <if test="empPhone != null">
                empPhone=#{empPhone,jdbcType=VARCHAR},
            </if>
            <if test="empSalery != null">
                empSalery=#{empSalery,jdbcType=DECIMAL},
            </if>
            <if test="positionId != null">
                positionId=#{positionId,jdbcType=INTEGER},
            </if>
            <if test="empName != null">
                empName=#{empName,jdbcType=VARCHAR},
            </if>
            <if test="empPassword != null">
                empPassword=#{empPassword,jdbcType=VARCHAR},
            </if>
        </set>
        where empId=#{empId,jdbcType=INTEGER}
    </update>

    <!-- 通过辅助工具Assist中的条件将Employee中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateEmployee" parameterType="map">
        update employee
        <set>
                empId=#{enti.empId,jdbcType=INTEGER},
                companyId=#{enti.companyId,jdbcType=INTEGER},
                empPhone=#{enti.empPhone,jdbcType=VARCHAR},
                empSalery=#{enti.empSalery,jdbcType=DECIMAL},
                positionId=#{enti.positionId,jdbcType=INTEGER},
                empName=#{enti.empName,jdbcType=VARCHAR},
                empPassword=#{enti.empPassword,jdbcType=VARCHAR},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Employee中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyEmployee" parameterType="map">
        update employee
        <set>
            <if test="enti.empId != null">
                empId=#{enti.empId,jdbcType=INTEGER},
            </if>
            <if test="enti.companyId != null">
                companyId=#{enti.companyId,jdbcType=INTEGER},
            </if>
            <if test="enti.empPhone != null">
                empPhone=#{enti.empPhone,jdbcType=VARCHAR},
            </if>
            <if test="enti.empSalery != null">
                empSalery=#{enti.empSalery,jdbcType=DECIMAL},
            </if>
            <if test="enti.positionId != null">
                positionId=#{enti.positionId,jdbcType=INTEGER},
            </if>
            <if test="enti.empName != null">
                empName=#{enti.empName,jdbcType=VARCHAR},
            </if>
            <if test="enti.empPassword != null">
                empPassword=#{enti.empPassword,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>