<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hzit.dao.PositionMapper">
    <!-- Position的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Position_Map" type="com.hzit.entity.Position">
        <id column="positionId" jdbcType="INTEGER" property="positionId" />
        <result column="positionName" jdbcType="VARCHAR" property="positionName" />
        <result column="positionLevel" jdbcType="VARCHAR" property="positionLevel" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:position的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="position_Column">
        position.positionId as positionId
        ,position.positionName as positionName
        ,position.positionLevel as positionLevel
    </sql>

    <!--获得类名为:Position对应的数据库表的数据总行数 -->
    <select id="getPositionRowCount" parameterType="com.hzit.common.Assist" resultType="java.lang.Long">
        select count(positionId) from position
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Position对应数据库中表的数据集合 -->
    <select id="selectPosition" parameterType="com.hzit.common.Assist"  resultMap="result_Position_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="position_Column" /> 
            </otherwise>
        </choose>
        from position
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT positionId as primary_key FROM position
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow,jdbcType=INTEGER},#{rowSize,jdbcType=INTEGER} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize,jdbcType=INTEGER}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=position.positionId
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Position对象,以参数Position对象中不为空的属性作为条件进行查询-->
    <select id="selectPositionByObj" parameterType="com.hzit.entity.Position" resultMap="result_Position_Map">
        select 
            <include refid="position_Column" /> 
        from position
        <where>
            <if test="positionLevel != null "> and position.positionLevel = #{positionLevel,jdbcType=VARCHAR}</if>
            <if test="positionName != null "> and position.positionName = #{positionName,jdbcType=VARCHAR}</if>
            <if test="positionId != null "> and position.positionId = #{positionId,jdbcType=INTEGER}</if>
        </where>
    </select> 

    <!-- 通过Position的id获得对应数据库中表的数据对象-->
    <select id="selectPositionById" parameterType="java.lang.Integer" resultMap="result_Position_Map">
        select 
            <include refid="position_Column" /> 
        from position
        where position.positionId = #{id,jdbcType=INTEGER}
    </select> 

    <!-- 将Position插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertPosition" parameterType="com.hzit.entity.Position">
        insert into position(positionId,positionName,positionLevel) 
        values(#{positionId,jdbcType=INTEGER},#{positionName,jdbcType=VARCHAR},#{positionLevel,jdbcType=VARCHAR})
    </insert>

    <!-- 将Position中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyPosition" parameterType="com.hzit.entity.Position">
        insert into position
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="positionId != null">positionId,</if>
            <if test="positionName != null">positionName,</if>
            <if test="positionLevel != null">positionLevel,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="positionId != null"> #{positionId,jdbcType=INTEGER},</if>
            <if test="positionName != null"> #{positionName,jdbcType=VARCHAR},</if>
            <if test="positionLevel != null"> #{positionLevel,jdbcType=VARCHAR},</if>
        </trim>
    </insert>

    <!-- 将Position批量插入到对应数据库的表中-->
    <insert id="insertPositionByBatch" parameterType="ArrayList">
        insert into position(positionId,positionName,positionLevel) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.positionId,jdbcType=INTEGER},#{item.positionName,jdbcType=VARCHAR},#{item.positionLevel,jdbcType=VARCHAR})
        </foreach>
    </insert>

    <!-- 通过Position的id将数据库表中对应的数据删除-->
    <delete id="deletePositionById" parameterType="java.lang.Integer">
        delete from position
        where positionId = #{id,jdbcType=INTEGER}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Position对应的数据库表的数据删除-->
    <delete id="deletePosition" parameterType="com.hzit.common.Assist">
        delete from position
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Position的id将Position的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updatePositionById" parameterType="com.hzit.entity.Position">
        update position set
            positionName=#{positionName,jdbcType=VARCHAR}
            ,positionLevel=#{positionLevel,jdbcType=VARCHAR}
        where positionId=#{positionId,jdbcType=INTEGER}
    </update>

    <!-- 通过Position的id将Position中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyPositionById" parameterType="com.hzit.entity.Position">
        update position
        <set>
            <if test="positionName != null">
                positionName=#{positionName,jdbcType=VARCHAR},
            </if>
            <if test="positionLevel != null">
                positionLevel=#{positionLevel,jdbcType=VARCHAR},
            </if>
        </set>
        where positionId=#{positionId,jdbcType=INTEGER}
    </update>

    <!-- 通过辅助工具Assist中的条件将Position中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updatePosition" parameterType="map">
        update position
        <set>
                positionId=#{enti.positionId,jdbcType=INTEGER},
                positionName=#{enti.positionName,jdbcType=VARCHAR},
                positionLevel=#{enti.positionLevel,jdbcType=VARCHAR},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Position中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyPosition" parameterType="map">
        update position
        <set>
            <if test="enti.positionId != null">
                positionId=#{enti.positionId,jdbcType=INTEGER},
            </if>
            <if test="enti.positionName != null">
                positionName=#{enti.positionName,jdbcType=VARCHAR},
            </if>
            <if test="enti.positionLevel != null">
                positionLevel=#{enti.positionLevel,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>