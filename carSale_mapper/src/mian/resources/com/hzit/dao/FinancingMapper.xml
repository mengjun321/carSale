<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hzit.dao.FinancingMapper">
    <!-- Financing的resultMap,column是给数据库列起的别名,它对应property类的属性-->
    <resultMap id="result_Financing_Map" type="com.hzit.entity.Financing">
        <id column="financingId" jdbcType="INTEGER" property="financingId" />
        <result column="companyId" jdbcType="INTEGER" property="companyId" />
        <result column="financingMoney" jdbcType="DECIMAL" property="financingMoney" />
        <result column="saleId" jdbcType="INTEGER" property="saleId" />
        <result column="repertoryId" jdbcType="INTEGER" property="repertoryId" />
        <result column="financingTime" jdbcType="TIMESTAMP" property="financingTime" />
        <result column="financingType" jdbcType="VARCHAR" property="financingType" />
    </resultMap>

	   <!-- Assist用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="Assist">
        <where>
            <foreach collection="require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

	   <!-- updateAssist用于更新数据的使用它拓展自Assist,用于辅助工具类setRequires设置的条件,${req.require}表示列名,#{req.value}表示值它是防SQL注入的 -->
    <sql id="updateAssist">
        <where>
            <foreach collection="assist.require" item="req" separator=" ">
                ${req.require} 
                <if test="req.value != null"> #{req.value}</if> 
                <if test="req.values != null">
                    <foreach collection="req.values" item="val" separator=","> 
                        #{val} 
                    </foreach> 
                </if> 
                <if test="req.suffix != null"> ${req.suffix}</if> 
            </foreach>
        </where>
    </sql>

    <!-- 数据库中表名为:financing的列名,as前是数据库的列明,as后是列的别名用于映射成实体类中的属性,需要注意的是别名必须与resultMap中的column别名一致 -->
    <sql id="financing_Column">
        financing.financingId as financingId
        ,financing.companyId as companyId
        ,financing.financingMoney as financingMoney
        ,financing.saleId as saleId
        ,financing.repertoryId as repertoryId
        ,financing.financingTime as financingTime
        ,financing.financingType as financingType
    </sql>

    <!--获得类名为:Financing对应的数据库表的数据总行数 -->
    <select id="getFinancingRowCount" parameterType="com.hzit.common.Assist" resultType="java.lang.Long">
        select count(financingId) from financing
        <if test="require!=null"><include refid="Assist" /></if>
    </select>
    <!-- 获得类名为:Financing对应数据库中表的数据集合 -->
    <select id="selectFinancing" parameterType="com.hzit.common.Assist"  resultMap="result_Financing_Map">
        select  <if test="distinct !=null">${distinct}</if>
        <choose>
            <when test="resultColumn!=null">${resultColumn}</when>
            <otherwise>
        <include refid="financing_Column" /> 
            </otherwise>
        </choose>
        from financing
        <choose>
            <when test="rowSize ==null">
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
            </when>
            <otherwise>
                inner join
                (
                SELECT financingId as primary_key FROM financing
                <if test="require!=null">
                    <include refid="Assist" />
                </if>
                <if test="order !=null">${order}</if>
                <choose>
                    <when test="startRow !=null and rowSize !=null">LIMIT #{startRow,jdbcType=INTEGER},#{rowSize,jdbcType=INTEGER} </when>
                    <when test="rowSize !=null">LIMIT #{rowSize,jdbcType=INTEGER}</when>
                 </choose>
                 ) as tmp
                 on tmp.primary_key=financing.financingId
            </otherwise>
        </choose>
    </select> 

    <!-- 获得一个Financing对象,以参数Financing对象中不为空的属性作为条件进行查询-->
    <select id="selectFinancingByObj" parameterType="com.hzit.entity.Financing" resultMap="result_Financing_Map">
        select 
            <include refid="financing_Column" /> 
        from financing
        <where>
            <if test="financingType != null "> and financing.financingType = #{financingType,jdbcType=VARCHAR}</if>
            <if test="financingTime != null "> and financing.financingTime = #{financingTime,jdbcType=TIMESTAMP}</if>
            <if test="repertoryId != null "> and financing.repertoryId = #{repertoryId,jdbcType=INTEGER}</if>
            <if test="saleId != null "> and financing.saleId = #{saleId,jdbcType=INTEGER}</if>
            <if test="financingMoney != null "> and financing.financingMoney = #{financingMoney,jdbcType=DECIMAL}</if>
            <if test="companyId != null "> and financing.companyId = #{companyId,jdbcType=INTEGER}</if>
            <if test="financingId != null "> and financing.financingId = #{financingId,jdbcType=INTEGER}</if>
        </where>
    </select> 

    <!-- 通过Financing的id获得对应数据库中表的数据对象-->
    <select id="selectFinancingById" parameterType="java.lang.Integer" resultMap="result_Financing_Map">
        select 
            <include refid="financing_Column" /> 
        from financing
        where financing.financingId = #{id,jdbcType=INTEGER}
    </select> 

    <!-- 将Financing插入到对应数据库的表中,包括属性值为null的数据-->

    <insert id="insertFinancing" parameterType="com.hzit.entity.Financing">
        insert into financing(financingId,companyId,financingMoney,saleId,repertoryId,financingTime,financingType) 
        values(#{financingId,jdbcType=INTEGER},#{companyId,jdbcType=INTEGER},#{financingMoney,jdbcType=DECIMAL},#{saleId,jdbcType=INTEGER},#{repertoryId,jdbcType=INTEGER},#{financingTime,jdbcType=TIMESTAMP},#{financingType,jdbcType=VARCHAR})
    </insert>

    <!-- 将Financing中属性值不为null的数据,插入到对应数据库的表中-->
    <insert id="insertNonEmptyFinancing" parameterType="com.hzit.entity.Financing">
        insert into financing
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="financingId != null">financingId,</if>
            <if test="companyId != null">companyId,</if>
            <if test="financingMoney != null">financingMoney,</if>
            <if test="saleId != null">saleId,</if>
            <if test="repertoryId != null">repertoryId,</if>
            <if test="financingTime != null">financingTime,</if>
            <if test="financingType != null">financingType,</if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="financingId != null"> #{financingId,jdbcType=INTEGER},</if>
            <if test="companyId != null"> #{companyId,jdbcType=INTEGER},</if>
            <if test="financingMoney != null"> #{financingMoney,jdbcType=DECIMAL},</if>
            <if test="saleId != null"> #{saleId,jdbcType=INTEGER},</if>
            <if test="repertoryId != null"> #{repertoryId,jdbcType=INTEGER},</if>
            <if test="financingTime != null"> #{financingTime,jdbcType=TIMESTAMP},</if>
            <if test="financingType != null"> #{financingType,jdbcType=VARCHAR},</if>
        </trim>
    </insert>

    <!-- 将Financing批量插入到对应数据库的表中-->
    <insert id="insertFinancingByBatch" parameterType="ArrayList">
        insert into financing(financingId,companyId,financingMoney,saleId,repertoryId,financingTime,financingType) values
        <foreach collection="list" item="item" index="index" separator="," >
            (#{item.financingId,jdbcType=INTEGER},#{item.companyId,jdbcType=INTEGER},#{item.financingMoney,jdbcType=DECIMAL},#{item.saleId,jdbcType=INTEGER},#{item.repertoryId,jdbcType=INTEGER},#{item.financingTime,jdbcType=TIMESTAMP},#{item.financingType,jdbcType=VARCHAR})
        </foreach>
    </insert>

    <!-- 通过Financing的id将数据库表中对应的数据删除-->
    <delete id="deleteFinancingById" parameterType="java.lang.Integer">
        delete from financing
        where financingId = #{id,jdbcType=INTEGER}
    </delete>

    <!-- 通过辅助工具Assist中的条件将Financing对应的数据库表的数据删除-->
    <delete id="deleteFinancing" parameterType="com.hzit.common.Assist">
        delete from financing
        <if test="require!=null"><include refid="Assist" /></if>
    </delete>

    <!-- 通过Financing的id将Financing的数据更新到数据库中对应的表,包括值null的数据-->
    <update id="updateFinancingById" parameterType="com.hzit.entity.Financing">
        update financing set
            companyId=#{companyId,jdbcType=INTEGER}
            ,financingMoney=#{financingMoney,jdbcType=DECIMAL}
            ,saleId=#{saleId,jdbcType=INTEGER}
            ,repertoryId=#{repertoryId,jdbcType=INTEGER}
            ,financingTime=#{financingTime,jdbcType=TIMESTAMP}
            ,financingType=#{financingType,jdbcType=VARCHAR}
        where financingId=#{financingId,jdbcType=INTEGER}
    </update>

    <!-- 通过Financing的id将Financing中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyFinancingById" parameterType="com.hzit.entity.Financing">
        update financing
        <set>
            <if test="companyId != null">
                companyId=#{companyId,jdbcType=INTEGER},
            </if>
            <if test="financingMoney != null">
                financingMoney=#{financingMoney,jdbcType=DECIMAL},
            </if>
            <if test="saleId != null">
                saleId=#{saleId,jdbcType=INTEGER},
            </if>
            <if test="repertoryId != null">
                repertoryId=#{repertoryId,jdbcType=INTEGER},
            </if>
            <if test="financingTime != null">
                financingTime=#{financingTime,jdbcType=TIMESTAMP},
            </if>
            <if test="financingType != null">
                financingType=#{financingType,jdbcType=VARCHAR},
            </if>
        </set>
        where financingId=#{financingId,jdbcType=INTEGER}
    </update>

    <!-- 通过辅助工具Assist中的条件将Financing中的数据更新到数据库对应的表中,包括值为null的数据-->
    <update id="updateFinancing" parameterType="map">
        update financing
        <set>
                financingId=#{enti.financingId,jdbcType=INTEGER},
                companyId=#{enti.companyId,jdbcType=INTEGER},
                financingMoney=#{enti.financingMoney,jdbcType=DECIMAL},
                saleId=#{enti.saleId,jdbcType=INTEGER},
                repertoryId=#{enti.repertoryId,jdbcType=INTEGER},
                financingTime=#{enti.financingTime,jdbcType=TIMESTAMP},
                financingType=#{enti.financingType,jdbcType=VARCHAR},
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

    <!-- 通过辅助工具Assist中的条件将Financing中属性值不为null的数据更新到数据库对应的表中-->
    <update id="updateNonEmptyFinancing" parameterType="map">
        update financing
        <set>
            <if test="enti.financingId != null">
                financingId=#{enti.financingId,jdbcType=INTEGER},
            </if>
            <if test="enti.companyId != null">
                companyId=#{enti.companyId,jdbcType=INTEGER},
            </if>
            <if test="enti.financingMoney != null">
                financingMoney=#{enti.financingMoney,jdbcType=DECIMAL},
            </if>
            <if test="enti.saleId != null">
                saleId=#{enti.saleId,jdbcType=INTEGER},
            </if>
            <if test="enti.repertoryId != null">
                repertoryId=#{enti.repertoryId,jdbcType=INTEGER},
            </if>
            <if test="enti.financingTime != null">
                financingTime=#{enti.financingTime,jdbcType=TIMESTAMP},
            </if>
            <if test="enti.financingType != null">
                financingType=#{enti.financingType,jdbcType=VARCHAR},
            </if>
        </set>
        <if test="assist.require!=null"><include refid="updateAssist" /></if>
    </update>

</mapper>